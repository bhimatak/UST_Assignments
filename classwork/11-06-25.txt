1. Print Numbers Using Two Threads
Problem: Create two threads. One thread prints numbers from 1 to 10, and the other thread prints numbers from 11 to 20. Use std::thread to demonstrate concurrent execution.

Objective: Understand basic thread creation and joining.

2. Print Odd and Even Numbers Using Same Function
Problem: Write a program using two threads running the same function to print odd and even numbers from 1 to N. Use a flag to distinguish between threads.

Objective: Learn how to pass arguments to threads and reuse the same function logic with different behavior.

3. Thread-safe Counter with Mutex
Problem: Create multiple threads that increment a shared counter 1000 times each. Use a mutex to protect the counter from race conditions.

Objective: Demonstrate data race and how to prevent it using std::mutex.

4. Print Characters Alternately (Ping Pong)
Problem: Create two threads. One prints "Ping" and the other prints "Pong" alternately 10 times. Ensure the output is in the correct alternating sequence.

Objective: Understand thread synchronization using condition variables or atomic flags.


5. Print "ABC" Using Three Threads
Problem Statement:
Create three threads to print "A", "B", and "C" respectively in strict sequence. The final output should be:
ABCABCABC... repeated 5 times.

Constraints:

Each thread should print only its assigned character.

Use synchronization to ensure ordering: A → B → C → A ...

Objective: Understand how to use condition variables or semaphores to coordinate multiple threads cyclically.

6. Odd-Even Alternating Print Using Threads
Problem Statement:
Create two threads, one to print odd numbers and one to print even numbers from 1 to 20 in order:
1 2 3 4 ... 20

Constraints:

The odd thread prints 1, 3, 5...

The even thread prints 2, 4, 6...

The output must be strictly in sequence.

Objective: Practice coordination of threads based on numeric condition and alternating turns.

7. Print FizzBuzz Using Four Threads
Problem Statement:
Given a number n, create four threads to print the numbers from 1 to n with the following rules:

One thread prints "Fizz" for multiples of 3.

One prints "Buzz" for multiples of 5.

One prints "FizzBuzz" for multiples of both 3 and 5.

One prints the number for all other values.

Constraints:

Output must be in order from 1 to n.

Objective: Understand how to divide responsibility among threads and synchronize shared progress.
